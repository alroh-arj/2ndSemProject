@page "/shift/{shift_id:int}"
@using New2ndSemester.Shared
@using New2ndSemester.Client.Services
@inject IShiftService _shiftService
@inject IUserService _userService
@inject NavigationManager _navigationManager

@if (eshift != null)
{
    <div>
        <div class="mb-3">
            <div class="mb-3">
                <label class="form-label">Titel</label>
                <input @bind="eshift.shift.title" type="text" class="form-control" autofocus>
            </div>
            <div class="mb-3">
                <label class="form-label">Beskrivelse</label>
                <textarea @bind="eshift.shift.description" class="form-control mb-2" rows="3"></textarea>
            </div>
            <div class="mb-3">
                <label class="form-label">Antal Frivillige</label>
                <input @bind="eshift.shift.required_volunteers" type="number" style="width: 120px" min="0" id="typeNumber" class="form-control"/>
            </div>
            <div class="mb-3">
                <label for="exampleFormControlSelect1">Lokalitet</label>
                <select @bind="eshift.shift.location_id" class="form-control" id="exampleFormControlSelect1">
                    @foreach (var location in locations)
                    {
                        <option value="@location.id">@location.name</option>
                    }
                </select>
            </div>
            <div class="d-flex justify-content-center gap-2">
                <button @onclick="DeleteShift" class="btn btn-danger">Slet vagt</button>
                <button @onclick="UpdateShift" class="btn btn-primary">Gem vagt</button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int shift_id { get; set; }
    private ExtendedShift? eshift;
    private int locationId;
    private Location[] locations;
    private bool _canAdministrateShifts;

    protected override async void OnInitialized()
    {
        eshift = await _shiftService.GetShift(shift_id);
        _canAdministrateShifts = await _userService.SessionUserHasRole("Admin") ||
                                 await _userService.SessionUserHasRole("Frivilligkoordinator");
        locations = await _shiftService.GetAllLocations();
        StateHasChanged();
    }
    
    private async void UpdateShift()
    {
        eshift = await _shiftService.SetShift(eshift.shift);
    }

    private async void DeleteShift()
    {
        await _shiftService.DeleteShift(eshift.shift.id ?? 0);
        _navigationManager.NavigateTo("/administrate_shifts");
    }
}
